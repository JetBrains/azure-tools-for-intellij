import org.apache.tools.ant.filters.*

buildscript {
    repositories {
        maven { url "https://cache-redirector.jetbrains.com/intellij-repository/snapshots" }
        maven { url "https://cache-redirector.jetbrains.com/maven-central" }
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.4.15"
    id "org.jetbrains.kotlin.jvm" version "1.3.11"
}

processResources {
    filesMatching('**/ApplicationInsights.xml') {
        filter(ReplaceTokens, tokens: ["applicationinsights.key": project.property("applicationinsights.key")])
    }
}

group 'com.microsoft.azuretools'

compileJava {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

compileKotlin {
    kotlinOptions.jvmTarget = javaVersion
}
compileTestKotlin {
    kotlinOptions.jvmTarget = javaVersion
}

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

repositories {
    maven {url uri('../../.repository')} // to snap to the private maven repo on Jenkins if any
    mavenLocal()
    mavenCentral()
}

apply plugin: 'java'

configurations {
    compile.exclude module:'slf4j-api'
    compile.exclude module:'log4j'
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

dependencies {
    compile fileTree(dir: '../AddLibrary/AzureLibraries/com.microsoft.azuretools.sdk/dependencies', include: ['applicationinsights-management-1.0.3.jar'])
    compile 'com.microsoft.sqlserver:mssql-jdbc:6.1.0.jre8'
    compile 'commons-io:commons-io:2.5'
    compile 'net.minidev:json-smart:2.3'
    compile 'com.microsoft.azure:azure-client-runtime:1.6.13', { force = true }
    compile 'com.microsoft.azure:azure-client-authentication:1.6.13', { force = true }
    compile 'com.microsoft.azuretools:azuretools-core:3.31.0', {
        exclude group: "com.microsoft.azure", module: "azure-client-authentication"
        exclude group: "com.microsoft.azure", module: "azure-client-runtime"
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    compile 'com.microsoft.azuretools:azure-explorer-common:3.31.0', {
        exclude group: "com.microsoft.azure", module: "azure-client-authentication"
        exclude group: "com.microsoft.azure", module: "azure-client-runtime"
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    compile 'com.microsoft.azuretools:hdinsight-node-common:3.31.0', {
        exclude group: "com.microsoft.azure", module: "azure-client-authentication"
        exclude group: "com.microsoft.azure", module: "azure-client-runtime"
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    compile 'com.spotify:docker-client:8.11.7'
    compile 'org.jetbrains.kotlin:kotlin-reflect:1.3.11'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.4'
}

configurations {
    compile.exclude module: 'slf4j-api'
}

allprojects {
    apply plugin: "kotlin"
    apply plugin: 'org.jetbrains.intellij'
    apply plugin: 'java'

    group 'com.microsoft.azuretools'

    repositories {
        maven { url new File(rootProject.projectDir, '../../.repository').toURI() } // to snap to the private maven repo on Jenkins if any
        mavenLocal()
        maven { url "https://cache-redirector.jetbrains.com/intellij-repository/snapshots" }
        maven { url "https://cache-redirector.jetbrains.com/maven-central" }
    }

    compileJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
    }

    compileKotlin {
        kotlinOptions.jvmTarget = javaVersion
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = javaVersion
    }

    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    intellij {
        switch (build_common_code_with) {
            case "rider":
                version = rider_version
                logger.lifecycle("COMMON_SDK=$rider_version")
                break
            case "idea":
                version = idea_version
                logger.lifecycle("COMMON_SDK=$idea_version")
                break
            default:
                throw new Exception("Unsupported value for build_common_code_with: " + build_common_code_with)
        }

        updateSinceUntilBuild = Boolean.valueOf(updateVersionRange)
        downloadSources = Boolean.valueOf(sources)
    }

    runIde {
        jvmArgs '-Xmx2048m'
    }

    instrumentCode {
        // javac2 is required to compile .form files from IntelliJ IDEA UI Designer
        // Since Rider distribution does not contain it, take it from IDEA
        javac2 {
            "${project(":idea").extensions.getByName("intellij").ideaDependency.classes}/lib/javac2.jar"
        }
    }

    sourceSets {
        main {
            java.srcDirs 'src'
            kotlin.srcDirs 'src'
            resources.srcDirs 'resources'
        }
        test {
            java {
                srcDir 'Test/java'
            }
            kotlin.srcDirs 'Test/java'
            resources {
                srcDir 'Test/resources'
            }
        }
    }

    test {
        testLogging.showStandardStreams = true
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

defaultTasks 'buildPlugin', 'test'

task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
