import org.apache.tools.ant.filters.*

buildscript {
    repositories {
        maven { url "https://cache-redirector.jetbrains.com/intellij-repository/snapshots" }
        maven { url "https://cache-redirector.jetbrains.com/maven-central" }
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.4.9"
    id "org.jetbrains.kotlin.jvm" version "1.3.11"
}

processResources {
    filesMatching('**/ApplicationInsights.xml') {
        filter(ReplaceTokens, tokens: ["applicationinsights.key": project.property("applicationinsights.key")])
    }
}

group 'com.microsoft.azuretools'

compileJava {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

compileKotlin {
    kotlinOptions.jvmTarget = javaVersion
}
compileTestKotlin {
    kotlinOptions.jvmTarget = javaVersion
}

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

apply plugin: 'checkstyle'
apply plugin: 'findbugs'

checkstyle {
    toolVersion = '7.7'
    configFile = new File('config/checkstyle/checkstyle.xml')
    showViolations = false
}

findbugs {
    toolVersion = "3.0.1"
    ignoreFailures = true
}

intellij {
    pluginName = 'azure-toolkit-for-intellij'
    version = intellij_version
    updateSinceUntilBuild = Boolean.valueOf(updateVersionRange)
    plugins = ['maven', dep_plugins, "properties"]
	downloadSources = Boolean.valueOf(sources)
}

sourceSets {
    main {
        java.srcDirs 'src'
        kotlin.srcDirs 'src'
        resources.srcDirs 'resources'
    }
    test {
        java {
            srcDir 'Test/java'
        }
        kotlin.srcDirs 'Test/java'
        resources {
            srcDir 'Test/resources'
        }
    }
}

repositories {
    maven {url uri('../../.repository')} // to snap to the private maven repo on Jenkins if any
    mavenLocal()
    mavenCentral()
}

apply plugin: 'java'

configurations {
    compile.exclude module:'slf4j-api'
    compile.exclude module:'log4j'
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

dependencies {
    compile fileTree(dir: '../AddLibrary/AzureLibraries/com.microsoft.azuretools.sdk/dependencies', include: ['applicationinsights-management-1.0.3.jar'])
    compile 'com.microsoft.sqlserver:mssql-jdbc:6.1.0.jre8'
    compile 'commons-io:commons-io:2.5'
    compile 'net.minidev:json-smart:2.3'
    compile 'com.microsoft.azure:azure-client-runtime:1.6.5', { force = true }
    compile 'com.microsoft.azure:azure-client-authentication:1.6.5', { force = true }
    compile 'com.microsoft.azuretools:azuretools-core:3.26.0', {
        exclude group: "com.microsoft.azure", module: "azure-client-authentication"
        exclude group: "com.microsoft.azure", module: "azure-client-runtime"
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    compile 'com.microsoft.azuretools:azure-explorer-common:3.26.0', {
        exclude group: "com.microsoft.azure", module: "azure-client-authentication"
        exclude group: "com.microsoft.azure", module: "azure-client-runtime"
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    compile 'com.microsoft.azuretools:hdinsight-node-common:3.26.0', {
        exclude group: "com.microsoft.azure", module: "azure-client-authentication"
        exclude group: "com.microsoft.azure", module: "azure-client-runtime"
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    compile 'com.spotify:docker-client:8.11.7'
    compile 'org.jetbrains.kotlin:kotlin-reflect:1.3.11'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.4'

    testCompile 'junit:junit:4.12'
    testCompile 'info.cukes:cucumber-junit:1.2.5'
    testCompile 'info.cukes:cucumber-java:1.2.5'
    testCompile 'org.mockito:mockito-core:2.7.22'
    testCompile 'org.assertj:assertj-swing-junit:3.5.0'

    testCompile 'com.github.tomakehurst:wiremock:2.8.0'
    testCompile 'org.powermock:powermock-module-junit4:1.7.0RC4'
    testCompile 'org.powermock:powermock-api-mockito2:1.7.0RC4'
    testCompile 'javax.servlet:javax.servlet-api:3.1.0'

    testCompile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit"
}

configurations {
    compile.exclude module: 'slf4j-api'
}

allprojects {
    apply plugin: "kotlin"
    apply plugin: 'org.jetbrains.intellij'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'

    group 'com.microsoft.azuretools'

    repositories {
        maven { url new File(rootProject.projectDir, '../../.repository').toURI() } // to snap to the private maven repo on Jenkins if any
        mavenLocal()
        maven { url "https://cache-redirector.jetbrains.com/intellij-repository/snapshots" }
        maven { url "https://cache-redirector.jetbrains.com/maven-central" }
    }

    compileJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
    }

    compileKotlin {
        kotlinOptions.jvmTarget = javaVersion
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = javaVersion
    }

    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    // checkstyle {
    //     toolVersion = '7.7'
    //     configFile = new File(rootProject.projectDir, 'config/checkstyle/checkstyle.xml')
    //     showViolations = false
    // }

    findbugs {
        toolVersion = "3.0.1"
        ignoreFailures = true
    }

    intellij {
        switch (build_common_code_with) {
            case "rider":
                version = rider_version
                logger.lifecycle("COMMON_SDK=$rider_version")
                break
            case "idea":
                version = idea_version
                logger.lifecycle("COMMON_SDK=$idea_version")
                break
            default:
                throw new Exception("Unsupported value for build_common_code_with: " + build_common_code_with)
        }

        updateSinceUntilBuild = Boolean.valueOf(updateVersionRange)
        downloadSources = Boolean.valueOf(sources)
    }

    instrumentCode {
        // javac2 is required to compile .form files from IntelliJ IDEA UI Designer
        // Since Rider distribution does not contain it, take it from IDEA
        javac2 {
            "${project(":idea").extensions.getByName("intellij").ideaDependency.classes}/lib/javac2.jar"
        }
    }

    sourceSets {
        main {
            java.srcDirs 'src'
            resources.srcDirs 'resources'
        }
        test {
            java {
                srcDir 'test/java'
            }
            resources {
                srcDir 'test/resources'
            }
        }
    }

    test {
        testLogging.showStandardStreams = true
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

test {
    testLogging.showStandardStreams = true
    testLogging {
        events "passed", "skipped", "failed"
    }
} 

task cucumberPackJar(type: Jar) {
    appendix = 'pathing'

    doFirst {
        manifest {
            attributes "Class-Path": configurations.cucumberRuntime.files.collect {
                it.toURI().toString().replaceFirst(/file:\/+/, '/')
            }.join(' ')
        }
    }
}

buildSearchableOptions.onlyIf {false}

task cucumber() {
    dependsOn compileTestJava, cucumberPackJar
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = files(sourceSets.main.output, sourceSets.test.output, cucumberPackJar.archivePath)
            args = [
                '--plugin', 'progress',
                '--glue', 'com.microsoft.azure.hdinsight.spark.common',
                '-m',
                'Test/resources']
        }
    }
}

test.dependsOn cucumber
// buildPlugin.dependsOn test

defaultTasks 'buildPlugin', 'test'

task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
