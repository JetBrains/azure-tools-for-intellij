buildscript {
    ext.kotlin_version = kotlin_version
    // https://www.myget.org/feed/rd-snapshots/package/maven/com.jetbrains.rd/rd-gen
    ext.rd_version = rd_version

    println("Generate models with rd-gen version: $rd_version")

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "com.jetbrains.rd:rd-gen:$rd_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

ext.rdLibDirectory = new File(project.parent.setupDependencies.idea.get().classes, 'lib/rd')

// Add RD SDK and rd-gen into a classpath.
repositories {
    flatDir {
        dirs rdLibDirectory.absolutePath
    }
    mavenCentral()
}

apply plugin: 'com.jetbrains.rdgen'
apply plugin: 'kotlin'

// Add dependencies to make it discoverable inside protocol models.
dependencies {
    implementation name: 'rider-model'
    implementation "com.jetbrains.rd:rd-gen:$rd_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

def protocolGroup = 'protocol'

ext.csDaemonGeneratedOutput = new File(resharperPluginPath, 'src/Azure.Daemon/Protocol')
ext.ktGeneratedOutput = new File(projectDir, '../src/org/jetbrains/protocol')
ext.modelDir = new File(projectDir, 'src/model')

ext.rdgenDir = file("${project.buildDir}/rdgen/")
rdgenDir.mkdirs()

task generateModel(type: tasks.getByName('rdgen').class) {
    group = protocolGroup
    description = 'Generates protocol models'

    // NOTE: classpath is evaluated lazily, at execution time, because it comes from the unzipped
    // intellij SDK, which is extracted in afterEvaluate
    params {
        verbose = true
        hashFolder = rdgenDir

        logger.info('Configuring rdgen params')
        classpath {
            "${rdLibDirectory.canonicalPath}/rider-model.jar"
        }

        sources modelDir.canonicalPath
        packages = "model"

        systemProperties["ktGeneratedOutput"]="${ktGeneratedOutput.canonicalPath}"
        systemProperties["csDaemonGeneratedOutput"]="${resharperPluginPath.canonicalPath}/src/Azure.Daemon/Protocol"
    }
}

task cleanProtocolModels {
    group = protocolGroup
    description = 'Clean up generated protocol models'

    def protocolOutDirs = [ ktGeneratedOutput, csDaemonGeneratedOutput ]

    doLast {
        protocolOutDirs.forEach { dir ->
            if (dir.isDirectory()) {
                dir.deleteDir()
            }
        }
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = javaVersion
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = javaVersion
    }
}
