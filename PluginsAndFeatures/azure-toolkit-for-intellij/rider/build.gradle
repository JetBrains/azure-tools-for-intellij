import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.jetbrains.intellij.tasks.PrepareSandboxTask

sourceSets {
    integrationTest {
        compileClasspath += main.output
        runtimeClasspath += main.output

        kotlin.srcDirs = ['test-integration']
        resources.srcDirs = ['test-integration/resources']
    }
}

dependencies {
    implementation project(path: ":", configuration: "instrumentedJar")
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "org.java-websocket:Java-WebSocket:$web_socket_version"

    testImplementation project(path: ":", configuration: "instrumentedJar")
    testImplementation "org.jetbrains.kotlin:kotlin-test:${kotlin_version}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-testng:${kotlin_version}"
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

ext {
    resharperPluginPath = new File(projectDir, 'ReSharper.Azure')

    // Plugin version
    if (!ext.has('BuildNumber'))
        BuildNumber = buildNumber
}

apply from: 'backend.gradle'

version "$BuildNumber"
logger.lifecycle("version=$version")
println "##teamcity[buildNumber '$version']"

def extensionsFrom = 'resources/dotnet'

intellij {
    pluginName = rider_plugin_name
    version = rider_version

    // Workaround for https://youtrack.jetbrains.com/issue/IDEA-179607
    def extraPlugins = [ "rider-plugins-appender" ]
    plugins = ['DatabaseTools', 'css-impl', 'javascript-impl', 'nodeJS', 'terminal', 'restClient'] + extraPlugins

    updateSinceUntilBuild = Boolean.valueOf(updateVersionRange)
    downloadSources = Boolean.valueOf(sources)
}

tasks.withType(PrepareSandboxTask).configureEach {
    dependsOn buildReSharperPlugin

    from(extensionsFrom, {
        into "$rider_plugin_name/dotnet"
        duplicatesStrategy DuplicatesStrategy.INCLUDE
    })
    from(buildReSharperPlugin.outputs, {
        into "$rider_plugin_name/dotnet"
        duplicatesStrategy DuplicatesStrategy.INCLUDE
    })
}

buildSearchableOptions.onlyIf { false }

patchPluginXml {
    println("Set since-build value: $patchPluginXmlSinceBuild")
    sinceBuild = patchPluginXmlSinceBuild

    def untilBuildValue = null
    if (patchPluginXmlSinceBuild.length() == 3)
        untilBuildValue = "${patchPluginXmlSinceBuild}.*"
    else if (patchPluginXmlSinceBuild.contains("."))
        untilBuildValue = "${patchPluginXmlSinceBuild.split(".")[0]}.*"

    println("Set until-build value: $untilBuildValue")
    untilBuild = untilBuildValue
}

test {
    description = "Rider unit tests."
    dependsOn ':rider:buildPlugin'

    useTestNG()

    jvmArgs '--illegal-access=warn', '-Didea.force.use.core.classloader=true'
}

task integrationTest(type: Test) {
    description = "Rider Azure integration tests based on Rider Test Framework."
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    dependsOn ':rider:buildPlugin'

    environment("LOCAL_ENV_RUN", rider_test_local_env_run)
    environment("NO_FS_ROOTS_ACCESS_CHECK", true)
    useTestNG()

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    jvmArgs '--illegal-access=warn', '-Didea.force.use.core.classloader=true'

    testLogging {
        showStandardStreams = true
        exceptionFormat = TestExceptionFormat.FULL
    }

    doFirst {
        // Inspect environment variables
        println "LOCAL_ENV_RUN = $rider_test_local_env_run"

        // NuGet.config needed in testData
        def nugetConfigPath = new File(projectDir, 'NuGet.Config')
        def nugetConfigPathTestData = new File(projectDir, 'testData/NuGet.config')
        
        println "Copying " + nugetConfigPath.path + " to " + nugetConfigPathTestData.path
        nugetConfigPathTestData.withOutputStream { it.write(nugetConfigPath.readBytes()) }
    }
}

clean {
    dependsOn cleanBackend, ':rider:protocol:cleanProtocolModels'
}

jar {
    dependsOn ':rider:protocol:generateModel'
}
