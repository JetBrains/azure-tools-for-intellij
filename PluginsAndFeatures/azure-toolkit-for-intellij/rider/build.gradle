import org.jetbrains.intellij.tasks.PrepareSandboxTask

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output

        kotlin.srcDirs = ['test-integration']
        resources.srcDirs = ['test-integration/resources']
    }
}

dependencies {
    implementation rootProject
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "org.java-websocket:Java-WebSocket:$web_socket_version"

    testImplementation rootProject

    // REVIEW: these should come from the rootProject, but somehow don't.
    //
    // This is visible e.g. in com/microsoft/intellij/helpers/validator/WebAppValidator.kt:79,
    // where AzureModel from one of these dependencies is not resolved.
    //
    // Any improvements to only have to declare these once would be appreciated.
    // ---
    implementation "org.aspectj:aspectjtools:${aspectj_tools_version}"
    implementation 'com.microsoft.azuretools:azuretools-core:3.50.0', {
        exclude group: "com.microsoft.azure", module: "azure-client-authentication"
        exclude group: "com.microsoft.azure", module: "azure-client-runtime"
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    implementation 'com.microsoft.azuretools:azure-explorer-common:3.50.0', {
        exclude group: "com.microsoft.azure", module: "azure-client-authentication"
        exclude group: "com.microsoft.azure", module: "azure-client-runtime"
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    implementation 'com.microsoft.azuretools:hdinsight-node-common:3.50.0', {
        exclude group: "com.microsoft.azure", module: "azure-client-authentication"
        exclude group: "com.microsoft.azure", module: "azure-client-runtime"
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    implementation group: 'com.microsoft.azure', name: 'azure-auth-helper', version: '0.6.0'
    // ---
}

configurations {
    compile.exclude module: 'stax-api'
    compile.exclude module: 'slf4j-api'
    compile.exclude module: 'log4j'
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

ext {
    resharperPluginPath = new File(projectDir, 'ReSharper.Azure')

    // Plugin version
    if (!ext.has('BuildNumber'))
        BuildNumber = buildNumber
}

apply from: 'backend.gradle'

version "$BuildNumber"
logger.lifecycle("version=$version")
println "##teamcity[buildNumber '$version']"

def extensionsFrom = 'resources/dotnet'

intellij {
    pluginName = rider_plugin_name
    version = rider_version

    // Workaround for https://youtrack.jetbrains.com/issue/IDEA-179607
    def extraPlugins = [ "rider-plugins-appender" ]
    plugins = ['DatabaseTools', 'css-impl', 'javascript-impl', 'nodeJS', 'terminal', 'restClient'] + extraPlugins

    updateSinceUntilBuild = Boolean.valueOf(updateVersionRange)
    downloadSources = Boolean.valueOf(sources)
}

tasks.withType(PrepareSandboxTask).configureEach {
    dependsOn buildReSharperPlugin

    from(extensionsFrom, {
        into "$rider_plugin_name/dotnet"
        duplicatesStrategy DuplicatesStrategy.INCLUDE
    })
    from(buildReSharperPlugin.outputs, {
        into "$rider_plugin_name/dotnet"
        duplicatesStrategy DuplicatesStrategy.INCLUDE
    })
}

buildSearchableOptions.onlyIf { false }

patchPluginXml {
    println("Set since-build value: $patchPluginXmlSinceBuild")
    sinceBuild = patchPluginXmlSinceBuild

    def untilBuildValue = null
    if (patchPluginXmlSinceBuild.length() == 3)
        untilBuildValue = "${patchPluginXmlSinceBuild}.*"
    else if (patchPluginXmlSinceBuild.contains("."))
        untilBuildValue = "${patchPluginXmlSinceBuild.split(".")[0]}.*"

    println("Set until-build value: $untilBuildValue")
    untilBuild = untilBuildValue
}

test {
    description = "Rider unit tests."
    dependsOn ':rider:buildPlugin'

    useTestNG()

    jvmArgs '--illegal-access=warn', '-Didea.force.use.core.classloader=true'
}

task integrationTest(type: Test) {
    description = "Rider Azure integration tests based on Rider Test Framework."
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    dependsOn ':rider:buildPlugin'

    environment("LOCAL_ENV_RUN", rider_test_local_env_run)
    environment("NO_FS_ROOTS_ACCESS_CHECK", true)
    useTestNG()

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    jvmArgs '--illegal-access=warn', '-Didea.force.use.core.classloader=true'

    testLogging {
        showStandardStreams = true
    }

    doFirst {
        println "LOCAL_ENV_RUN = $rider_test_local_env_run"
    }
}

clean {
    dependsOn cleanBackend, ':rider:protocol:cleanProtocolModels'
}

jar {
    dependsOn ':rider:protocol:generateModel'
}
